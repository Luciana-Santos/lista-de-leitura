{"version":3,"file":"index.js","mappings":"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","sources":["webpack://static-setup/./src/app/js/modules/dateFormating.js","webpack://static-setup/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://static-setup/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://static-setup/./src/app/js/modules/Store.js","webpack://static-setup/./src/app/js/modules/Book.js","webpack://static-setup/./src/app/js/modules/UI.js","webpack://static-setup/./src/app/js/modules/utils.js","webpack://static-setup/./src/app/js/modules/events.js","webpack://static-setup/./src/app/js/index.js"],"sourcesContent":["function daysToSeconds(days) {\n  return Math.floor(days * 24 * 60 * 60);\n}\n\nexport default function dateFormating(totalPages, pagesPerDay) {\n  const dateNow = new Date();\n  const previsionDays = totalPages / pagesPerDay;\n  const secondsFromDays = daysToSeconds(previsionDays);\n\n  dateNow.setSeconds(dateNow.getSeconds() + secondsFromDays);\n\n  const datePreview = dateNow.toLocaleDateString('pt-BR');\n  return datePreview;\n}\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default class Store {\n  static getBooks() {\n    let books;\n    if (localStorage.getItem('books') === null) books = [];\n    else books = JSON.parse(localStorage.getItem('books'));\n\n    return books;\n  }\n\n  static addBook(book) {\n    const books = Store.getBooks();\n    books.push(book);\n    localStorage.setItem('books', JSON.stringify(books));\n  }\n\n  static removeBook(id) {\n    const books = Store.getBooks();\n\n    books.forEach((book, index) => {\n      if (+book.id === +id) books.splice(index, 1);\n    });\n\n    localStorage.setItem('books', JSON.stringify(books));\n  }\n\n  static updateBook(id, book) {\n    const books = Store.getBooks();\n\n    books.forEach((bookEl, index) => {\n      if (bookEl.id === id) {\n        books.splice(index, 1);\n        books.push(book);\n      }\n      localStorage.setItem('books', JSON.stringify(books));\n    });\n  }\n}\n","export default class Book {\n  constructor(id, cover, title, author, pagesTotal, pagesPerDay, prevision) {\n    this.id = id;\n    this.cover = cover;\n    this.title = title;\n    this.author = author;\n    this.pagesTotal = pagesTotal;\n    this.pagesPerDay = pagesPerDay;\n    this.prevision = prevision;\n    this.completed = false;\n  }\n}\n","/* eslint-disable indent */\nimport Book from './Book';\nimport dateFormating from './dateFormating';\nimport Store from './Store';\nimport { modalStructure } from './utils';\n\nexport default class UI {\n  static displayBooks() {\n    const books = Store.getBooks();\n\n    books.forEach((book) => UI.addBookToList(book));\n  }\n\n  static addBookToList(book) {\n    const bookList = document.querySelector('[data-book=\"list\"]');\n    const bookItem = document.createElement('article');\n    bookItem.setAttribute('id', book.id);\n\n    bookItem.classList.add('book_list__item');\n    const defaultCover = './assets/cover-undefined.png';\n\n    // criar função em utils para o html\n    bookItem.innerHTML = `\n      <div class=\"book_list__item__img\">\n        <img src=\"${book.cover || defaultCover}\" alt=\"${book.title}\">\n      </div>\n      <div class=\"book_list__item__info\" data-book=\"info\">\n        <h3>${book.title} <span class=\"book_id\" data-book=\"bookId\">#${\n      book.id\n    }</span></h3>\n        <p class=\"prevision\" data-book=\"previsionDate\">Previsão de término: <span>${\n          book.prevision\n        }</span></p>\n        <div class=\"progress\">\n          <div class=\"progress__info\">\n            <p class=\"pages\"><span data-book=\"currPage\">${book.currPag || 0}\n              </span> páginas de ${book.pagesTotal}</p>\n            <p class=\"percentage\" data-book=\"percentage\">${\n              book.percentage || 0\n            }%\n            </p>            \n          </div>\n          <div class=\"progress__bar\">\n            <span data-book=\"progressBar\"></span>\n          </div>\n        </div>  \n\n        <div class=\"book_list__item__btn\" data-bookItem=\"btn\">\n          ${\n            book.completed\n              ? '<p class=\"completed_book\">Concluído</p>'\n              : '<button class=\"btn btn--red update\" data-book=\"update\">Atualizar</button>'\n          }\n          <i class=\"fa-solid fa-trash-can delete\"></i>\n        </div>\n      </div>\n    `;\n    bookItem.dataset.book = 'item';\n\n    bookList.insertAdjacentElement('afterbegin', bookItem);\n\n    UI.updateProgressBar(book.id, book.percentage || 0);\n  }\n\n  // trocar para utils\n  static getInputsValue() {\n    const inputCover = document.querySelector('#cover');\n    const inputTitleValue = document.querySelector('#title').value;\n    const inputAuthorValue = document.querySelector('#author').value;\n    const inputTotalPagesValue = document.querySelector('#totalPages').value;\n    const inputPagesPerDayValue = document.querySelector('#pagesPerDay').value;\n    const imgBlob = inputCover?.nextElementSibling?.attributes.src.nodeValue;\n    const datePrevision = dateFormating(\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n    );\n    const id = Math.floor(Math.random() * 9999999);\n\n    return {\n      id,\n      imgBlob,\n      inputTitleValue,\n      inputAuthorValue,\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n      datePrevision,\n    };\n  }\n\n  static addBookData(e) {\n    e.preventDefault();\n\n    const formContainer = document.querySelector('[data-form=\"container\"]');\n    const {\n      id,\n      imgBlob,\n      inputTitleValue,\n      inputAuthorValue,\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n      datePrevision,\n    } = UI.getInputsValue();\n\n    // validate\n    if (\n      inputTitleValue === '' ||\n      inputTotalPagesValue === '' ||\n      inputPagesPerDayValue === ''\n    ) {\n      // alerta de error\n      UI.showAlert(\n        'Por favor, preencha os campos marcados com *.',\n        'error',\n        formContainer,\n        'beforeend',\n      );\n    } else {\n      const book = new Book(\n        id,\n        imgBlob,\n        inputTitleValue,\n        inputAuthorValue,\n        inputTotalPagesValue,\n        inputPagesPerDayValue,\n        datePrevision,\n      );\n\n      // renderiza livro\n      UI.addBookToList(book);\n\n      // adiciona livro no localStorage\n      Store.addBook(book);\n\n      // limpar campos do form\n      UI.clearInputFields();\n\n      // alerta de sucesso\n      UI.showAlert('Livro adicionado!', 'success', formContainer, 'beforeend');\n    }\n  }\n\n  // criar função em utils\n  static clearInputFields() {\n    document.querySelector('#title').value = '';\n    document.querySelector('#author').value = '';\n    document.querySelector('#totalPages').value = '';\n    document.querySelector('#pagesPerDay').value = '';\n    const inputCover = document.querySelector('#cover');\n    const iconImg = document.querySelector('.fa-image');\n    const imgPreview = document.querySelector('[data-image=\"preview\"]');\n\n    imgPreview && imgPreview.remove();\n    const datePrevision = document.querySelector('[data-from=\"prevision\"]');\n    datePrevision.innerText = '00/00/0000';\n    iconImg.style.display = 'block';\n    inputCover.removeAttribute('disabled');\n  }\n\n  static deleteBook(element) {\n    if (element.classList.contains('delete')) {\n      // remove livro do localStorage\n      const id = document\n        .querySelector('[data-book=\"bookId\"]')\n        .innerText.substring(1);\n      Store.removeBook(id);\n\n      // remover livro da UI\n      element.parentElement.parentElement.parentElement.remove();\n\n      // alerta de error\n      const formContainer = document.querySelector('[data-form=\"container\"]');\n      UI.showAlert('Livro removido!', 'success', formContainer, 'afterend');\n    }\n  }\n\n  static showAlert(message, className, container, position) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `alert alert-${className}`;\n    messageDiv.appendChild(document.createTextNode(message));\n\n    container.insertAdjacentElement(position, messageDiv);\n\n    setTimeout(() => {\n      document.querySelector('.alert').remove();\n    }, 2000);\n  }\n\n  static bookModalRender(container, book, id) {\n    // separar o html para utils\n    if (book.id === +id) {\n      container.innerHTML = modalStructure(book);\n    } else console.log('logica errada');\n  }\n\n  // renderiza modal na tela\n  static bookUpdateModal(target, modalContainer, idTarget) {\n    const body = document.querySelector('body');\n\n    if (target.classList.contains('update')) {\n      modalContainer.style.display = 'grid';\n      body.style.overflowY = 'hidden';\n\n      const books = Store.getBooks();\n      books.forEach((book) => {\n        if (+book.id === +idTarget) {\n          UI.bookModalRender(modalContainer, book, idTarget);\n        }\n      });\n    }\n  }\n\n  // // trocar para events\n  static closeModal(element) {\n    const modalContainer = document.querySelector('[data-modal=\"container\"]');\n    const body = document.querySelector('body');\n    const form = document.querySelector('[data-modal=\"form\"]');\n    const modalInput = document.querySelector('[data-modal=\"prevision\"]');\n    const modal = modalContainer.querySelector('.modal');\n\n    if (\n      element.classList.contains('cancel') ||\n      element.classList.contains('backdrop')\n    ) {\n      modalContainer.style.display = 'none';\n      body.style.overflowY = 'scroll';\n      form.reset();\n    }\n    if (modalInput.value === '' && element.classList.contains('confirm')) {\n      UI.showAlert('Insira a página atual.', 'error', modal, 'beforeend');\n    }\n    if (modalInput.value !== '' && element.classList.contains('confirm')) {\n      modalContainer.style.display = 'none';\n      body.style.overflowY = 'scroll';\n      form.reset();\n    }\n  }\n\n  // // trocar para utils\n  static getPregressPerc(currPag, totalPages) {\n    return ((currPag / totalPages) * 100).toFixed();\n  }\n\n  static updateProgressBar(id, percentage) {\n    const element = document.getElementById(id);\n    const percentageHolder = element.querySelector('[data-book=\"percentage\"]');\n    const progressBar = element.querySelector('[data-book=\"progressBar\"]');\n\n    percentageHolder.innerText = `${percentage}%` || '0';\n    progressBar.style.width = `${percentage}%`;\n  }\n\n  static updateProgressBarModal(percentage) {\n    const progressBarHolder = document.querySelector(\n      '[data-modal=\"progressBar\"]',\n    );\n    const percentageHolder = document.querySelector(\n      '[data-modal=\"percentage\"]',\n    );\n\n    progressBarHolder.style.width = `${percentage}%`;\n    if (percentage > 100) percentageHolder.innerText = '100%';\n    else percentageHolder.innerText = `${percentage}%` || '0';\n  }\n\n  static updateDate(id, date) {\n    const element = document.getElementById(id);\n    const dateHolder = element.querySelector(\n      '[data-book=\"previsionDate\"] span',\n    );\n\n    dateHolder.innerText = date;\n  }\n\n  static updateCurrPage(id, page) {\n    const element = document.getElementById(id);\n    const currPageHolder = element.querySelector('[data-book=\"currPage\"]');\n\n    currPageHolder.innerText = page;\n  }\n}\n","import Store from './Store';\n\n// renderiza mensagem de livro concluído\nexport function bookCompleted(book) {\n  const btnUpdateContainer = document.querySelector('[data-bookItem=\"btn\"]');\n  const btnUpdate = btnUpdateContainer.querySelector('button');\n\n  if (+book.percentage === 100) {\n    btnUpdate.remove();\n    const completedText = document.createElement('p');\n    completedText.innerText = 'Concluído!';\n    completedText.classList.add('completed_book');\n    btnUpdateContainer.insertAdjacentElement('afterbegin', completedText);\n\n    // tá atualizando todos os itens\n    const books = Store.getBooks();\n    books.forEach((book) => {\n      book.completed = true;\n      Store.updateBook(book.id, book);\n    });\n  }\n}\n\n// retorna o html do modal\nexport function modalStructure(book) {\n  const defaultCover = './assets/cover-undefined.png';\n\n  return `\n  <div class=\"modal\" data-modalBookId=\"${book.id}\">\n    <div class=\"modal__book_cover\">\n      <img src=\"${book.cover || defaultCover}\" alt=\"${book.title}\">\n    </div>\n\n    <div class=\"modal__book_info\">\n      <span>${book.author || 'Autor não informado'}</span>\n      <p>${book.title}</p>\n    </div>\n\n    <form class=\"modal__form\" data-modal=\"form\">\n      <fieldset>\n        <label for=\"currPag\">Pág. Atual:*</label>\n        <input type=\"number\" id=\"currPag\" name=\"currPag\" placeholder=\"${\n          book.currPag || book.pagesPerDay\n        }\" data-modal=\"prevision\">\n      </fieldset>\n      \n      <div>\n        <span>Pág. Total:*</span>\n        <p data-modal=\"totalPages\">${book.pagesTotal}</p>\n      </div>\n    </form>\n\n    <div class=\"previsao\">\n      <p>Previsão de término:</p>\n      <p class=\"data-prevista\" data-modal=\"date\">${book.prevision}</p>\n\n      <div class=\"progress\">\n        <p data-modal=\"percentage\">${book.percentage || '0'}%</p>\n        <div class=\"progress__bar\">\n        <span data-modal=\"progressBar\" style=\"width:${book.percentage}%\"></span>\n      </div>\n      </div>\n    </div>\n\n    <div class=\"form__btn\">\n      <button class=\"btn btn--cancel cancel\" data-modal=\"cancel\">Cancelar</button>\n      <button class=\"btn btn--red confirm\" data-modal=\"confirm\">OK</button>\n    </div>\n  </div>\n`;\n}\n","import dateFormating from './dateFormating';\nimport Store from './Store';\nimport UI from './UI';\nimport { bookCompleted } from './utils';\n\nexport default function initEvents() {\n  // elementos globais\n  const btnAddBook = document.querySelector('[data-form=\"btn\"]');\n\n  document.addEventListener('DOMContentLoaded', UI.displayBooks);\n  btnAddBook.addEventListener('click', (e) => {\n    UI.addBookData(e);\n    location.reload();\n  });\n\n  const ImgPreview = document.querySelector('[data-form=\"imgPreview\"]');\n  const inputCover = document.querySelector('#cover');\n  const clearFormBtn = document.querySelector('[data-form=\"removeBtn\"]');\n  const bookList = document.querySelector('[data-book=\"list\"]');\n  const modalContainer = document.querySelector('[data-modal=\"container\"]');\n  const inputPagesPerDayValue = document.querySelector('#pagesPerDay');\n  const books = Store.getBooks();\n\n  // renderiza capa na área de input\n  const handleImgPreview = ({ target }) => {\n    const iconImg = document.querySelector('.fa-image');\n    const image = document.createElement('img');\n    image.src = target.result;\n\n    iconImg.style.display = 'none';\n    image.dataset.image = 'preview';\n    inputCover.setAttribute('disabled', '');\n    ImgPreview.appendChild(image);\n  };\n\n  // pega os dados do input da imagem\n  const handleImgPreviewData = ({ target }) => {\n    const file = target.files[0];\n    const reader = new FileReader();\n\n    if (file) {\n      reader.addEventListener('load', (e) => handleImgPreview(e));\n\n      reader.readAsDataURL(file);\n    }\n  };\n  inputCover.addEventListener('change', (e) => handleImgPreviewData(e));\n\n  clearFormBtn.addEventListener('click', (e) => {\n    e.preventDefault();\n    UI.clearInputFields();\n  });\n\n  // função que irá lidar com a parte\n  // da previsão de leitura no form principal\n  function handleDatePrevisionMainForm({ target }) {\n    const formTotalPagsValue = document.querySelector('#totalPages').value;\n\n    if (formTotalPagsValue && target.value) {\n      const datePrevisionHolder = document.querySelector(\n        '[data-from=\"prevision\"]',\n      );\n      datePrevisionHolder.innerText = dateFormating(\n        formTotalPagsValue,\n        target.value,\n      );\n    }\n  }\n\n  let idTarget;\n\n  // abrir modal\n  function handleUpdateModal({ target }) {\n    idTarget = target.parentElement.parentElement\n      .querySelector('[data-book=\"bookId\"]')\n      .innerText.substring(1);\n    UI.bookUpdateModal(target, modalContainer, idTarget);\n\n    handleModalPrevisionDate(target);\n  }\n\n  let dateContainer;\n  let dateModal;\n\n  // função que renderiza a previsão de leitura no modal\n  function handleModalPrevisionDate(target) {\n    const modalDatePrevision = document.querySelector(\n      '[data-modal=\"prevision\"]',\n    );\n    dateContainer = document.querySelector('[data-modal=\"date\"]');\n    const totalPages = document.querySelector('[data-modal=\"totalPages\"]');\n    const modal = modalContainer.querySelector('.modal');\n    const btnConfirm = document.querySelector('[data-modal=\"confirm\"]');\n\n    if (dateContainer) {\n      modalDatePrevision.addEventListener('change', ({ target }) => {\n        if (target.value > totalPages.innerText || target.value <= 0) {\n          UI.showAlert('Página atual inválida.', 'error', modal, 'beforeend');\n          btnConfirm.setAttribute('disabled', true);\n        } else {\n          btnConfirm.removeAttribute('disabled');\n          dateContainer.innerText = dateFormating(\n            totalPages.innerText,\n            target.value,\n          );\n\n          const progressBar = document.querySelector(\n            '[data-modal=\"progressBar\"]',\n          );\n          const percentage = UI.getPregressPerc(\n            target.value,\n            totalPages.innerText,\n          );\n\n          UI.updateProgressBarModal(percentage);\n\n          dateModal = target.value;\n          dateContainer = document.querySelector('[data-modal=\"date\"]');\n        }\n      });\n    }\n  }\n\n  // fecha o modal e passa informações\n  modalContainer.addEventListener('click', ({ target }) => {\n    if (target.classList.contains('confirm')) {\n      UI.closeModal(target);\n\n      books.forEach((book) => {\n        book.currPag = dateModal;\n        book.percentage = UI.getPregressPerc(book.currPag, book.pagesTotal);\n        book.prevision = dateContainer.innerText;\n        if (+idTarget === book.id) {\n          Store.updateBook(+idTarget, book);\n          UI.updateProgressBar(book.id, book.percentage);\n          UI.updateDate(book.id, book.prevision);\n          UI.updateCurrPage(book.id, book.currPag);\n\n          bookCompleted(book);\n        }\n      });\n    }\n  });\n\n  bookList.addEventListener('click', (e) => {\n    e.preventDefault();\n    handleUpdateModal(e);\n    UI.deleteBook(e.target);\n  });\n  modalContainer.addEventListener('click', ({ target }) => {\n    UI.closeModal(target);\n  });\n  inputPagesPerDayValue.addEventListener('change', (e) => {\n    handleDatePrevisionMainForm(e);\n  });\n}\n","import initEvents from './modules/events';\n\ninitEvents();\n"],"names":["dateFormating","totalPages","pagesPerDay","days","dateNow","Date","secondsFromDays","Math","floor","setSeconds","getSeconds","toLocaleDateString","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Store","localStorage","getItem","JSON","parse","book","books","getBooks","push","setItem","stringify","id","forEach","index","splice","bookEl","Book","cover","title","author","pagesTotal","prevision","this","completed","UI","addBookToList","bookList","document","querySelector","bookItem","createElement","setAttribute","classList","add","innerHTML","currPag","percentage","dataset","insertAdjacentElement","updateProgressBar","inputCover","inputTitleValue","value","inputAuthorValue","inputTotalPagesValue","inputPagesPerDayValue","imgBlob","nextElementSibling","attributes","src","nodeValue","datePrevision","random","e","preventDefault","formContainer","getInputsValue","showAlert","addBook","clearInputFields","iconImg","imgPreview","remove","innerText","style","display","removeAttribute","element","contains","substring","removeBook","parentElement","message","className","container","position","messageDiv","appendChild","createTextNode","setTimeout","modalStructure","console","log","modalContainer","idTarget","body","overflowY","bookModalRender","form","modalInput","modal","reset","toFixed","getElementById","percentageHolder","progressBar","width","progressBarHolder","date","page","btnAddBook","addEventListener","displayBooks","addBookData","location","reload","dateContainer","dateModal","ImgPreview","clearFormBtn","file","files","reader","FileReader","image","result","readAsDataURL","closeModal","getPregressPerc","updateBook","updateDate","updateCurrPage","btnUpdateContainer","btnUpdate","completedText","bookCompleted","bookUpdateModal","modalDatePrevision","btnConfirm","updateProgressBarModal","handleModalPrevisionDate","deleteBook","formTotalPagsValue","initEvents"],"sourceRoot":""}