{"version":3,"file":"index.js","mappings":"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","sources":["webpack://static-setup/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://static-setup/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://static-setup/./src/app/js/modules/Store.js","webpack://static-setup/./src/app/js/modules/Book.js","webpack://static-setup/./src/app/js/modules/helpers.js","webpack://static-setup/./src/app/js/modules/events.js","webpack://static-setup/./src/app/js/modules/UI.js"],"sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default class Store {\n  static getBooks() {\n    let books;\n    if (localStorage.getItem('books') === null) books = [];\n    else books = JSON.parse(localStorage.getItem('books'));\n\n    return books;\n  }\n\n  static addBook(book) {\n    const books = Store.getBooks();\n    books.push(book);\n    localStorage.setItem('books', JSON.stringify(books));\n  }\n\n  static removeBook(id) {\n    const books = Store.getBooks();\n\n    books.forEach((book, index) => {\n      if (+book.id === +id) books.splice(index, 1);\n    });\n\n    localStorage.setItem('books', JSON.stringify(books));\n  }\n\n  static updateBook(id, book) {\n    const books = Store.getBooks();\n\n    books.forEach((bookEl, index) => {\n      if (bookEl.id === id) {\n        books.splice(index, 1);\n        books.push(book);\n      }\n      localStorage.setItem('books', JSON.stringify(books));\n    });\n  }\n}\n","export default class Book {\n  constructor(id, cover, title, author, pagesTotal, pagesPerDay, prevision) {\n    this.id = id;\n    this.cover = cover;\n    this.title = title;\n    this.author = author;\n    this.pagesTotal = pagesTotal;\n    this.pagesPerDay = pagesPerDay;\n    this.prevision = prevision;\n    this.completed = false;\n  }\n}\n","// mudal nome para helpers\n\nimport Store from './Store';\n\nconst defaultCover = './assets/cover-undefined.png';\n\n// renderiza mensagem de livro concluído\nexport function bookCompleted(book) {\n  const btnUpdateContainer = document.querySelector('[data-bookItem=\"btn\"]');\n  const btnUpdate = btnUpdateContainer.querySelector('button');\n\n  if (+book.percentage === 100) {\n    btnUpdate.remove();\n    const completedText = document.createElement('p');\n    completedText.innerText = 'Concluído!';\n    completedText.classList.add('completed_book');\n    btnUpdateContainer.insertAdjacentElement('afterbegin', completedText);\n\n    // tá atualizando todos os itens\n    const books = Store.getBooks();\n    books.forEach((bookItem) => {\n      if (bookItem.currPag >= 100) {\n        bookItem.completed = true;\n        Store.updateBook(bookItem.id, bookItem);\n      }\n    });\n  }\n}\n\n// retorna o html do modal\nexport function modalStructure(book) {\n  return `\n  <div class=\"modal\" data-modalBookId=\"${book.id}\">\n    <div class=\"modal__book_cover\">\n      <img src=\"${book.cover || defaultCover}\" alt=\"${book.title}\">\n    </div>\n\n    <div class=\"modal__book_info\">\n      <span>${book.author || 'Autor não informado'}</span>\n      <p>${book.title}</p>\n    </div>\n\n    <form class=\"modal__form\" data-modal=\"form\">\n      <fieldset>\n        <label for=\"currPag\">Pág. Atual:*</label>\n        <input type=\"number\" id=\"currPag\" name=\"currPag\" placeholder=\"${\n          book.currPag || book.pagesPerDay\n        }\" data-modal=\"prevision\">\n      </fieldset>\n      \n      <div>\n        <span>Pág. Total:*</span>\n        <p data-modal=\"totalPages\">${book.pagesTotal}</p>\n      </div>\n    </form>\n\n    <div class=\"previsao\">\n      <p>Previsão de término:</p>\n      <p class=\"data-prevista\" data-modal=\"date\">${book.prevision}</p>\n\n      <div class=\"progress\">\n        <p data-modal=\"percentage\">${book.percentage || '0'}%</p>\n        <div class=\"progress__bar\">\n        <span data-modal=\"progressBar\" style=\"width:${book.percentage}%\"></span>\n      </div>\n      </div>\n    </div>\n\n    <div class=\"form__btn\">\n      <button class=\"btn btn--cancel cancel\" data-modal=\"cancel\">Cancelar</button>\n      <button class=\"btn btn--red confirm\" data-modal=\"confirm\">OK</button>\n    </div>\n  </div>\n`;\n}\n\n// retorna o html da lista de livros\nexport function bookListStructure(book) {\n  return `\n  <div class=\"book_list__item__img\">\n    <img src=\"${book.cover || defaultCover}\" alt=\"${book.title}\">\n  </div>\n  <div class=\"book_list__item__info\" data-book=\"info\">\n    <h3>${book.title} <span class=\"book_id\" data-book=\"bookId\">#${\n    book.id\n  }</span></h3>\n    <p class=\"prevision\" data-book=\"previsionDate\">Previsão de término: <span>${\n      book.prevision\n    }</span></p>\n    <div class=\"progress\">\n      <div class=\"progress__info\">\n        <p class=\"pages\"><span data-book=\"currPage\">${book.currPag || 0}\n          </span> páginas de ${book.pagesTotal}</p>\n        <p class=\"percentage\" data-book=\"percentage\">${book.percentage || 0}%\n        </p>            \n      </div>\n      <div class=\"progress__bar\">\n        <span data-book=\"progressBar\"></span>\n      </div>\n    </div>  \n\n    <div class=\"book_list__item__btn\" data-bookItem=\"btn\">\n      ${\n        book.completed\n          ? '<p class=\"completed_book\">Concluído</p>'\n          : '<button class=\"btn btn--red update\" data-book=\"update\">Atualizar</button>'\n      }\n      <i class=\"fa-solid fa-trash-can delete\"></i>\n    </div>\n  </div>\n`;\n}\n\nfunction daysToSeconds(days) {\n  return Math.floor(days * 24 * 60 * 60);\n}\n\nexport function dateFormating(totalPages, pagesPerDay) {\n  if (totalPages <= 0 || pagesPerDay <= 0) return '00/00/0000';\n\n  const dateNow = new Date();\n  const previsionDays = totalPages / pagesPerDay;\n  const secondsFromDays = daysToSeconds(previsionDays);\n\n  dateNow.setSeconds(dateNow.getSeconds() + secondsFromDays);\n  const datePreview = dateNow.toLocaleDateString('pt-BR');\n\n  return datePreview;\n}\n\nexport function clearInputFields() {\n  document.querySelector('#title').value = '';\n  document.querySelector('#author').value = '';\n  document.querySelector('#totalPages').value = '';\n  document.querySelector('#pagesPerDay').value = '';\n  const inputCover = document.querySelector('#cover');\n  const iconImg = document.querySelector('.fa-image');\n  const imgPreview = document.querySelector('[data-image=\"preview\"]');\n\n  imgPreview && imgPreview.remove();\n  const datePrevision = document.querySelector('[data-from=\"prevision\"]');\n  datePrevision.innerText = '00/00/0000';\n  iconImg.style.display = 'block';\n  inputCover.removeAttribute('disabled');\n}\nexport function getProgressPerc(currPag, totalPages) {\n  return ((currPag / totalPages) * 100).toFixed();\n}\n","import Store from './Store';\nimport UI from './UI';\nimport {\n  bookCompleted,\n  clearInputFields,\n  dateFormating,\n  getProgressPerc,\n} from './helpers';\n\nexport default function initEvents() {\n  // elementos globais\n  const btnAddBook = document.querySelector('[data-form=\"btn\"]');\n  const ImgPreview = document.querySelector('[data-form=\"imgPreview\"]');\n  const inputCover = document.querySelector('#cover');\n  const clearFormBtn = document.querySelector('[data-form=\"removeBtn\"]');\n  const bookList = document.querySelector('[data-book=\"list\"]');\n  const modalContainer = document.querySelector('[data-modal=\"container\"]');\n  const inputPagesPerDayValue = document.querySelector('#pagesPerDay');\n  const books = Store.getBooks();\n\n  let idTarget;\n\n  // renderiza capa na área de input\n  const handleImgPreview = ({ target }) => {\n    const iconImg = document.querySelector('.fa-image');\n    const image = document.createElement('img');\n    image.src = target.result;\n\n    iconImg.style.display = 'none';\n    image.dataset.image = 'preview';\n    inputCover.setAttribute('disabled', '');\n    ImgPreview.appendChild(image);\n  };\n\n  // pega os dados do input da imagem\n  const handleImgPreviewData = ({ target }) => {\n    const file = target.files[0];\n    const reader = new FileReader();\n\n    if (file) {\n      reader.addEventListener('load', (e) => handleImgPreview(e));\n\n      reader.readAsDataURL(file);\n    }\n  };\n  inputCover.addEventListener('change', (e) => handleImgPreviewData(e));\n\n  clearFormBtn.addEventListener('click', (e) => {\n    e.preventDefault();\n    clearInputFields();\n  });\n\n  // função que irá lidar com a parte\n  // da previsão de leitura no form principal\n  function handleDatePrevisionMainForm({ target }) {\n    const formTotalPagsValue = document.querySelector('#totalPages').value;\n\n    if (formTotalPagsValue && target.value) {\n      const datePrevisionHolder = document.querySelector(\n        '[data-from=\"prevision\"]',\n      );\n      datePrevisionHolder.innerText = dateFormating(\n        formTotalPagsValue,\n        target.value,\n      );\n    }\n  }\n\n  // abrir modal\n  function handleUpdateModal({ target }) {\n    idTarget = target.parentElement.parentElement\n      .querySelector('[data-book=\"bookId\"]')\n      .innerText.substring(1);\n    UI.bookUpdateModal(target, modalContainer, idTarget);\n\n    handleModalPrevisionDate(target);\n  }\n\n  let dateContainer;\n  let dateModal;\n\n  // função que renderiza a previsão de leitura no modal\n  function handleModalPrevisionDate() {\n    const modalDatePrevision = document.querySelector(\n      '[data-modal=\"prevision\"]',\n    );\n    dateContainer = document.querySelector('[data-modal=\"date\"]');\n    const totalPages = document.querySelector('[data-modal=\"totalPages\"]');\n    const modal = modalContainer.querySelector('.modal');\n    const btnConfirm = document.querySelector('[data-modal=\"confirm\"]');\n\n    if (dateContainer) {\n      modalDatePrevision.addEventListener('change', ({ target }) => {\n        if (target.value > totalPages.innerText || target.value <= 0) {\n          UI.showAlert('Página atual inválida.', 'error', modal, 'beforeend');\n          btnConfirm.setAttribute('disabled', true);\n        } else {\n          btnConfirm.removeAttribute('disabled');\n          dateContainer.innerText = dateFormating(\n            totalPages.innerText,\n            target.value,\n          );\n\n          const percentage = getProgressPerc(\n            target.value,\n            totalPages.innerText,\n          );\n\n          UI.updateProgressBarModal(percentage);\n\n          dateModal = target.value;\n          dateContainer = document.querySelector('[data-modal=\"date\"]');\n        }\n      });\n    }\n  }\n\n  // fecha o modal e passa informações\n  modalContainer.addEventListener('click', ({ target }) => {\n    if (target.classList.contains('confirm')) {\n      UI.closeModal(target);\n\n      books.forEach((book) => {\n        book.currPag = dateModal;\n        book.percentage = getProgressPerc(book.currPag, book.pagesTotal);\n        book.prevision = dateContainer.innerText;\n        if (+idTarget === book.id) {\n          Store.updateBook(+idTarget, book);\n          UI.updateProgressBar(book.id, book.percentage);\n          UI.updateDate(book.id, book.prevision);\n          UI.updateCurrPage(book.id, book.currPag);\n\n          bookCompleted(book);\n        }\n      });\n    }\n  });\n\n  bookList.addEventListener('click', (e) => {\n    e.preventDefault();\n    handleUpdateModal(e);\n    UI.deleteBook(e.target);\n  });\n  modalContainer.addEventListener('click', ({ target }) => {\n    UI.closeModal(target);\n  });\n  inputPagesPerDayValue.addEventListener('change', (e) => {\n    handleDatePrevisionMainForm(e);\n  });\n\n  document.addEventListener('DOMContentLoaded', UI.displayBooks);\n  btnAddBook.addEventListener('click', (e) => {\n    e.preventDefault();\n    UI.addBookData();\n  });\n}\n","/* eslint-disable indent */\nimport Book from './Book';\nimport Store from './Store';\nimport {\n  bookListStructure,\n  clearInputFields,\n  dateFormating,\n  modalStructure,\n} from './helpers';\n\nexport default class UI {\n  static displayBooks() {\n    const books = Store.getBooks();\n\n    books.forEach((book) => UI.addBookToList(book));\n  }\n\n  static addBookToList(book) {\n    const bookList = document.querySelector('[data-book=\"list\"]');\n    const bookItem = document.createElement('article');\n    bookItem.setAttribute('id', book.id);\n\n    bookItem.classList.add('book_list__item');\n\n    bookItem.innerHTML = bookListStructure(book);\n    bookItem.dataset.book = 'item';\n\n    bookList.insertAdjacentElement('afterbegin', bookItem);\n\n    UI.updateProgressBar(book.id, book.percentage || 0);\n  }\n\n  // trocar para utils\n  static getInputsValue() {\n    const inputCover = document.querySelector('#cover');\n\n    const inputTitleValue = document.querySelector('#title').value;\n    const inputAuthorValue = document.querySelector('#author').value;\n    const inputTotalPagesValue = document.querySelector('#totalPages').value;\n    const inputPagesPerDayValue = document.querySelector('#pagesPerDay').value;\n    const imgBlob = inputCover?.nextElementSibling?.attributes.src.nodeValue;\n    const datePrevision = dateFormating(\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n    );\n    const id = Math.floor(Math.random() * 9999999);\n\n    return {\n      id,\n      imgBlob,\n      inputTitleValue,\n      inputAuthorValue,\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n      datePrevision,\n    };\n  }\n\n  static addBookData() {\n    const formContainer = document.querySelector('[data-form=\"container\"]');\n\n    const {\n      id,\n      imgBlob,\n      inputTitleValue,\n      inputAuthorValue,\n      inputTotalPagesValue,\n      inputPagesPerDayValue,\n      datePrevision,\n    } = UI.getInputsValue();\n\n    // validate\n    if (\n      inputTitleValue === '' ||\n      inputTotalPagesValue === '' ||\n      inputTotalPagesValue <= 0 ||\n      inputPagesPerDayValue === '' ||\n      inputPagesPerDayValue <= 0\n    ) {\n      // alerta de error\n      UI.showAlert(\n        'Por favor, preencha os campos marcados com *.',\n        'error',\n        formContainer,\n        'beforeend',\n      );\n    } else {\n      const book = new Book(\n        id,\n        imgBlob,\n        inputTitleValue,\n        inputAuthorValue,\n        inputTotalPagesValue,\n        inputPagesPerDayValue,\n        datePrevision,\n      );\n\n      // renderiza livro\n      UI.addBookToList(book);\n\n      // adiciona livro no localStorage\n      Store.addBook(book);\n\n      // limpar campos do form\n      clearInputFields();\n\n      location.reload();\n\n      // alerta de sucesso\n      UI.showAlert('Livro adicionado!', 'success', formContainer, 'beforeend');\n    }\n  }\n\n  static deleteBook(element) {\n    if (element.classList.contains('delete')) {\n      // remove livro do localStorage\n      const id = document\n        .querySelector('[data-book=\"bookId\"]')\n        .innerText.substring(1);\n      Store.removeBook(id);\n\n      // remover livro da UI\n      element.parentElement.parentElement.parentElement.remove();\n\n      // alerta de error\n      const formContainer = document.querySelector('[data-form=\"container\"]');\n      UI.showAlert('Livro removido!', 'success', formContainer, 'afterend');\n    }\n  }\n\n  static showAlert(message, className, container, position) {\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `alert alert-${className}`;\n    messageDiv.appendChild(document.createTextNode(message));\n\n    container.insertAdjacentElement(position, messageDiv);\n\n    setTimeout(() => {\n      document.querySelector('.alert').remove();\n    }, 4000);\n  }\n\n  static bookModalRender(container, book, id) {\n    if (book.id === +id) {\n      container.innerHTML = modalStructure(book);\n    } else console.log('logica errada');\n  }\n\n  // renderiza modal na tela\n  static bookUpdateModal(target, modalContainer, idTarget) {\n    const body = document.querySelector('body');\n\n    if (target.classList.contains('update')) {\n      modalContainer.style.display = 'grid';\n      body.style.overflowY = 'hidden';\n\n      const books = Store.getBooks();\n      books.forEach((book) => {\n        if (+book.id === +idTarget) {\n          UI.bookModalRender(modalContainer, book, idTarget);\n        }\n      });\n    }\n  }\n\n  static closeModal(element) {\n    const modalContainer = document.querySelector('[data-modal=\"container\"]');\n    const body = document.querySelector('body');\n    const form = document.querySelector('[data-modal=\"form\"]');\n    const modalInput = document.querySelector('[data-modal=\"prevision\"]');\n    const modal = modalContainer.querySelector('.modal');\n\n    if (\n      element.classList.contains('cancel') ||\n      element.classList.contains('backdrop')\n    ) {\n      modalContainer.style.display = 'none';\n      body.style.overflowY = 'scroll';\n      form.reset();\n    }\n    if (modalInput.value === '' && element.classList.contains('confirm')) {\n      UI.showAlert('Insira a página atual.', 'error', modal, 'beforeend');\n    }\n    if (modalInput.value !== '' && element.classList.contains('confirm')) {\n      modalContainer.style.display = 'none';\n      body.style.overflowY = 'scroll';\n      form.reset();\n    }\n  }\n\n  static updateProgressBar(id, percentage) {\n    const element = document.getElementById(id);\n    const percentageHolder = element.querySelector('[data-book=\"percentage\"]');\n    const progressBar = element.querySelector('[data-book=\"progressBar\"]');\n\n    percentageHolder.innerText = `${percentage}%` || '0';\n    progressBar.style.width = `${percentage}%`;\n  }\n\n  static updateProgressBarModal(percentage) {\n    const progressBarHolder = document.querySelector(\n      '[data-modal=\"progressBar\"]',\n    );\n    const percentageHolder = document.querySelector(\n      '[data-modal=\"percentage\"]',\n    );\n\n    progressBarHolder.style.width = `${percentage}%`;\n    if (percentage > 100) percentageHolder.innerText = '100%';\n    else percentageHolder.innerText = `${percentage}%` || '0';\n  }\n\n  static updateDate(id, date) {\n    const element = document.getElementById(id);\n    const dateHolder = element.querySelector(\n      '[data-book=\"previsionDate\"] span',\n    );\n\n    dateHolder.innerText = date;\n  }\n\n  static updateCurrPage(id, page) {\n    const element = document.getElementById(id);\n    const currPageHolder = element.querySelector('[data-book=\"currPage\"]');\n\n    currPageHolder.innerText = page;\n  }\n}\n"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Store","localStorage","getItem","JSON","parse","book","books","getBooks","push","setItem","stringify","id","forEach","index","splice","bookEl","Book","cover","title","author","pagesTotal","pagesPerDay","prevision","this","completed","defaultCover","dateFormating","totalPages","days","dateNow","Date","secondsFromDays","Math","floor","setSeconds","getSeconds","toLocaleDateString","clearInputFields","document","querySelector","value","inputCover","iconImg","imgPreview","remove","innerText","style","display","removeAttribute","getProgressPerc","currPag","toFixed","idTarget","dateContainer","dateModal","btnAddBook","ImgPreview","clearFormBtn","bookList","modalContainer","inputPagesPerDayValue","UI","addBookToList","bookItem","createElement","setAttribute","classList","add","innerHTML","percentage","bookListStructure","dataset","insertAdjacentElement","updateProgressBar","inputTitleValue","inputAuthorValue","inputTotalPagesValue","imgBlob","nextElementSibling","attributes","src","nodeValue","datePrevision","random","formContainer","getInputsValue","showAlert","addBook","location","reload","element","contains","substring","removeBook","parentElement","message","className","container","position","messageDiv","appendChild","createTextNode","setTimeout","modalStructure","console","log","body","overflowY","bookModalRender","form","modalInput","modal","reset","getElementById","percentageHolder","progressBar","width","progressBarHolder","date","page","addEventListener","e","file","files","reader","FileReader","image","result","readAsDataURL","preventDefault","closeModal","updateBook","updateDate","updateCurrPage","btnUpdateContainer","btnUpdate","completedText","bookCompleted","bookUpdateModal","modalDatePrevision","btnConfirm","updateProgressBarModal","handleModalPrevisionDate","deleteBook","formTotalPagsValue","displayBooks","addBookData"],"sourceRoot":""}